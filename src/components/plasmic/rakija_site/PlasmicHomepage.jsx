// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: toir4xKH4aRMjXM9AUeVMJ
// Component: -NFrkmsG80gR
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import BottleComponent from "../../BottleComponent"; // plasmic-import: Ay49hDZCzV/component
import Button from "../../Button"; // plasmic-import: CzIKnLukEYe/component
import TextInput from "../../TextInput"; // plasmic-import: mbxfJX-hy_g/component
import { useScreenVariants as useScreenVariants_7Ks1UnM646Mq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 7ks_1UnM646mq/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_rakija_site.module.css"; // plasmic-import: toir4xKH4aRMjXM9AUeVMJ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: -NFrkmsG80gR/css
import group1PngUT7LoZsTj from "./images/group1Png.png"; // plasmic-import: uT7loZsTJ/picture
import vector1Png3127LsLhox from "./images/vector1Png3.png"; // plasmic-import: 127lsLhox/picture
import maskGroup1Png2GwXHtFlPg from "./images/maskGroup1Png2.png"; // plasmic-import: gwXHtFlPg/picture
import maskGroup3Png2I9PPuApWk from "./images/maskGroup3Png2.png"; // plasmic-import: I9PPuApWk/picture
import maskGroup2Png23NkeRtvJw from "./images/maskGroup2Png2.png"; // plasmic-import: 3NKERtvJw/picture
import maskGroup4Png2LtRln4M9X from "./images/maskGroup4Png2.png"; // plasmic-import: ltRLN4M9x/picture
import statisticalRegionsOfSerbiaNuts1PngCzlxPqp1M from "../gajiceva/images/statisticalRegionsOfSerbiaNuts1Png.png"; // plasmic-import: czlxPqp1M/picture
import screenShot20230504At123452AMpngXEnDcgCfk from "../gajiceva/images/screenShot20230504At123452AMpng.png"; // plasmic-import: xEnDCGCfk/picture

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_7Ks1UnM646Mq()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"parent"}
          data-plasmic-override={overrides.parent}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.parent
          )}
        >
          <div
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <a
                  data-plasmic-name={"logoFillIn"}
                  data-plasmic-override={overrides.logoFillIn}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.logoFillIn
                  )}
                  href={`/home`}
                >
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__zt2Jq
                    )}
                    href={`/home`}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__gA8Rw)}
                      displayHeight={"40px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      src={{
                        src: group1PngUT7LoZsTj,
                        fullWidth: 727,
                        fullHeight: 727,
                        aspectRatio: undefined
                      }}
                    />
                  </a>
                </a>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qC2Dr)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/close.svg"}
                />
              }
              itemsGap={8}
              menuItems={
                <React.Fragment>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___8TRqF
                    )}
                    href={`/about`}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToAboutUs"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "mwJbE88Ch",
                                  componentUuid: "-NFrkmsG80gR",
                                  argName: "destination"
                                },
                                () => `/about`
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "mwJbE88Ch",
                                componentUuid: "-NFrkmsG80gR"
                              },
                              () =>
                                (({ destination }) => {
                                  location.assign(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToAboutUs"] === "object" &&
                        typeof $steps["goToAboutUs"].then === "function"
                      ) {
                        $steps["goToAboutUs"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "mwJbE88Ch",
                            componentUuid: "-NFrkmsG80gR"
                          },
                          $steps["goToAboutUs"]
                        );
                      }
                    }}
                  >
                    {"O NAMA"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__oI0EN
                    )}
                    href={"/home#products"}
                  >
                    {"PROIZVODI"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___6OAh
                    )}
                    href={"/home#contact"}
                  >
                    {"KONTAKT"}
                  </a>
                </React.Fragment>
              }
              openButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___4Pd17)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: vector1Png3127LsLhox,
                          fullWidth: 45,
                          fullHeight: 13,
                          aspectRatio: undefined
                        }
                      : "https://static1.plasmic.app/menu.svg"
                  }
                />
              }
              responsiveBreakpoint={768}
            />

            <div
              data-plasmic-name={"gajicevaRakija"}
              data-plasmic-override={overrides.gajicevaRakija}
              className={classNames(projectcss.all, sty.gajicevaRakija)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q5LU0
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#B69760" }}
                  >
                    {"GAJIĆEVA"}
                  </span>
                </React.Fragment>
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"bottomText"}
                  data-plasmic-override={overrides.bottomText}
                  className={classNames(projectcss.all, sty.bottomText)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"socialsConvertToLinks"}
                      data-plasmic-override={overrides.socialsConvertToLinks}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.socialsConvertToLinks
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h6K2J
                        )}
                      >
                        {""}
                      </div>
                    </p.Stack>
                  ) : null}
                  <div
                    data-plasmic-name={"scroll"}
                    data-plasmic-override={overrides.scroll}
                    className={classNames(projectcss.all, sty.scroll)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zvzR
                      )}
                    >
                      {"Scroll"}
                    </div>
                  </div>
                </div>
              ) : null}
            </div>
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yr3Wg
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#FFFFFF" }}
                  >
                    {"Scroll"}
                  </span>
                </React.Fragment>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"featuredProducts"}
            data-plasmic-override={overrides.featuredProducts}
            className={classNames(projectcss.all, sty.featuredProducts)}
            id={"products"}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"productsColumnsParent"}
              data-plasmic-override={overrides.productsColumnsParent}
              hasGap={true}
              className={classNames(projectcss.all, sty.productsColumnsParent)}
            >
              <div
                data-plasmic-name={"one6"}
                data-plasmic-override={overrides.one6}
                className={classNames(projectcss.all, sty.one6)}
              />

              <div
                data-plasmic-name={"one"}
                data-plasmic-override={overrides.one}
                className={classNames(projectcss.all, sty.one)}
              >
                <BottleComponent
                  className={classNames(
                    "__wab_instance",
                    sty.bottleComponent___4AkXa
                  )}
                  link={`/Vilijamovka`}
                >
                  {"Vilijamovka"}
                </BottleComponent>
              </div>
              <div
                data-plasmic-name={"one2"}
                data-plasmic-override={overrides.one2}
                className={classNames(projectcss.all, sty.one2)}
              >
                <BottleComponent
                  className={classNames(
                    "__wab_instance",
                    sty.bottleComponent__kJqlb
                  )}
                  img={{
                    src: maskGroup1Png2GwXHtFlPg,
                    fullWidth: 118,
                    fullHeight: 361,
                    aspectRatio: undefined
                  }}
                  link={`/Kajsija`}
                >
                  {"Kajsija"}
                </BottleComponent>
              </div>
              <div
                data-plasmic-name={"one3"}
                data-plasmic-override={overrides.one3}
                className={classNames(projectcss.all, sty.one3)}
              >
                <BottleComponent
                  className={classNames(
                    "__wab_instance",
                    sty.bottleComponent__iMvUz
                  )}
                  img={{
                    src: maskGroup3Png2I9PPuApWk,
                    fullWidth: 113,
                    fullHeight: 361,
                    aspectRatio: undefined
                  }}
                  link={`/Sljiva`}
                >
                  {"Šljiva"}
                </BottleComponent>
              </div>
              <div
                data-plasmic-name={"one4"}
                data-plasmic-override={overrides.one4}
                className={classNames(projectcss.all, sty.one4)}
              >
                <BottleComponent
                  className={classNames(
                    "__wab_instance",
                    sty.bottleComponent__qZiIx
                  )}
                  img={{
                    src: maskGroup2Png23NkeRtvJw,
                    fullWidth: 122,
                    fullHeight: 361,
                    aspectRatio: undefined
                  }}
                  link={`/Dunja`}
                >
                  {"Dunja"}
                </BottleComponent>
              </div>
              <div
                data-plasmic-name={"one5"}
                data-plasmic-override={overrides.one5}
                className={classNames(projectcss.all, sty.one5)}
              >
                <BottleComponent
                  className={classNames(
                    "__wab_instance",
                    sty.bottleComponent__bu3F
                  )}
                  img={{
                    src: maskGroup4Png2LtRln4M9X,
                    fullWidth: 118,
                    fullHeight: 361,
                    aspectRatio: undefined
                  }}
                  link={`/Loza`}
                >
                  {"Loza"}
                </BottleComponent>
              </div>
              <div
                data-plasmic-name={"one7"}
                data-plasmic-override={overrides.one7}
                className={classNames(projectcss.all, sty.one7)}
              />
            </p.Stack>
          </div>
          <div
            data-plasmic-name={"whereCanYouTasteProdcuts2"}
            data-plasmic-override={overrides.whereCanYouTasteProdcuts2}
            className={classNames(
              projectcss.all,
              sty.whereCanYouTasteProdcuts2
            )}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jWhQs
              )}
            >
              {"RAKIJA PRAVLJENA ZA DUŠU..."}
            </div>
          </div>
          <div
            data-plasmic-name={"discover"}
            data-plasmic-override={overrides.discover}
            className={classNames(projectcss.all, sty.discover)}
          >
            <div
              data-plasmic-name={"discoverColumns"}
              data-plasmic-override={overrides.discoverColumns}
              className={classNames(projectcss.all, sty.discoverColumns)}
            >
              <div
                data-plasmic-name={"mapNeedToFindBetterMap"}
                data-plasmic-override={overrides.mapNeedToFindBetterMap}
                className={classNames(
                  projectcss.all,
                  sty.mapNeedToFindBetterMap
                )}
              >
                {true ? (
                  <div
                    data-plasmic-name={"map2NeedBetterMap"}
                    data-plasmic-override={overrides.map2NeedBetterMap}
                    className={classNames(
                      projectcss.all,
                      sty.map2NeedBetterMap
                    )}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___7TgH)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "768px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"552px"}
                      loading={"lazy"}
                      src={{
                        src: statisticalRegionsOfSerbiaNuts1PngCzlxPqp1M,
                        fullWidth: 744,
                        fullHeight: 1052,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.column__pGqZd)}>
                {true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hQa9R
                    )}
                  >
                    {"REGION RAKIJA I VINA"}
                  </div>
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iAn7U
                  )}
                >
                  {"ALEKSANDROVAČKI REGION JE NAJPOZNATIJI PO VINARIJAMA"}
                </div>
                <Button
                  className={classNames("__wab_instance", sty.button__vjkIk)}
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d2Ob
                    )}
                  >
                    {"VISE"}
                  </div>
                </Button>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"contact"}
            data-plasmic-override={overrides.contact}
            className={classNames(projectcss.all, sty.contact)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"contactParent"}
              data-plasmic-override={overrides.contactParent}
              hasGap={true}
              className={classNames(projectcss.all, sty.contactParent)}
              id={"contact"}
            >
              <div
                data-plasmic-name={"contact2"}
                data-plasmic-override={overrides.contact2}
                className={classNames(projectcss.all, sty.contact2)}
              >
                <form
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  action={"https://formspree.io/f/xoqzoagr"}
                  className={classNames(projectcss.all, sty.form)}
                  method={"POST"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__c2C25
                    )}
                  >
                    {"Kako do nas?"}
                  </div>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    name={"name"}
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Ime*"}
                    value={
                      p.generateStateValueProp($state, [
                        "textInput",
                        "value"
                      ]) ?? ""
                    }
                  />

                  <TextInput
                    data-plasmic-name={"textInput2"}
                    data-plasmic-override={overrides.textInput2}
                    className={classNames("__wab_instance", sty.textInput2)}
                    name={"email"}
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "textInput2",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Email*"}
                    value={
                      p.generateStateValueProp($state, [
                        "textInput2",
                        "value"
                      ]) ?? ""
                    }
                  />

                  <TextInput
                    data-plasmic-name={"textInput3"}
                    data-plasmic-override={overrides.textInput3}
                    aria-label={"message"}
                    className={classNames("__wab_instance", sty.textInput3)}
                    name={"message"}
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "textInput3",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={"Message*"}
                    value={
                      p.generateStateValueProp($state, [
                        "textInput3",
                        "value"
                      ]) ?? ""
                    }
                  />

                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__kMYcu
                    )}
                    formAction={"https://formspree.io/f/xoqzoagr"}
                    formMethod={"submit"}
                    method={"submit"}
                    type={"submit"}
                  >
                    {"POŠALJI"}
                  </button>
                </form>
              </div>
              <div
                data-plasmic-name={"mapAndInfo"}
                data-plasmic-override={overrides.mapAndInfo}
                className={classNames(projectcss.all, sty.mapAndInfo)}
              >
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__xH44V
                  )}
                  href={"https://goo.gl/maps/x5F3RiG7H3QG9hFi6"}
                  onClick={async event => {
                    const $steps = {};
                    $steps["updateTextInputValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "N_WZqOv2Q",
                                componentUuid: "-NFrkmsG80gR",
                                argName: "variable"
                              },
                              () => ({
                                objRoot: $state,
                                variablePath: ["textInput", "value"]
                              })
                            ),

                            operation: __wrapUserFunction(
                              {
                                type: "InteractionArgLoc",
                                actionName: "updateVariable",
                                interactionUuid: "N_WZqOv2Q",
                                componentUuid: "-NFrkmsG80gR",
                                argName: "operation"
                              },
                              () => 0
                            )
                          };
                          return __wrapUserFunction(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariable",
                              interactionUuid: "N_WZqOv2Q",
                              componentUuid: "-NFrkmsG80gR"
                            },
                            () =>
                              (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                p.set(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]),
                            actionArgs
                          );
                        })()
                      : undefined;
                    if (
                      typeof $steps["updateTextInputValue"] === "object" &&
                      typeof $steps["updateTextInputValue"].then === "function"
                    ) {
                      $steps["updateTextInputValue"] = await __wrapUserPromise(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "N_WZqOv2Q",
                          componentUuid: "-NFrkmsG80gR"
                        },
                        $steps["updateTextInputValue"]
                      );
                    }
                  }}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___2Tdd)}
                    displayHeight={"401px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"559px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHttpsgooglmapsQAd3JtUs2JdrvRyQ9"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "3ionTfW7U",
                                  componentUuid: "-NFrkmsG80gR",
                                  argName: "destination"
                                },
                                () => "https://goo.gl/maps/QAd3jtUs2JdrvRyQ9"
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "3ionTfW7U",
                                componentUuid: "-NFrkmsG80gR"
                              },
                              () =>
                                (({ destination }) => {
                                  location.assign(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToHttpsgooglmapsQAd3JtUs2JdrvRyQ9"] ===
                          "object" &&
                        typeof $steps["goToHttpsgooglmapsQAd3JtUs2JdrvRyQ9"]
                          .then === "function"
                      ) {
                        $steps["goToHttpsgooglmapsQAd3JtUs2JdrvRyQ9"] =
                          await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "navigation",
                              interactionUuid: "3ionTfW7U",
                              componentUuid: "-NFrkmsG80gR"
                            },
                            $steps["goToHttpsgooglmapsQAd3JtUs2JdrvRyQ9"]
                          );
                      }
                    }}
                    src={{
                      src: screenShot20230504At123452AMpngXEnDcgCfk,
                      fullWidth: 1882,
                      fullHeight: 1576,
                      aspectRatio: undefined
                    }}
                  />
                </a>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lWotf
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Street Address, Belgrade\n+123 456 9\nexample@gmail.com"
                      : ""}
                  </div>
                ) : null}
              </div>
            </p.Stack>
          </div>
          <div
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <div
              data-plasmic-name={"footerParentColumns"}
              data-plasmic-override={overrides.footerParentColumns}
              className={classNames(projectcss.all, sty.footerParentColumns)}
            >
              <div className={classNames(projectcss.all, sty.column___5Pwxl)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rt2AI
                  )}
                >
                  {""}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__lLRk)}>
                <p.PlasmicImg
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  alt={""}
                  className={classNames(sty.logo)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"50%"}
                  loading={"lazy"}
                  src={{
                    src: group1PngUT7LoZsTj,
                    fullWidth: 727,
                    fullHeight: 727,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__yAycJ)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7JGt
                    )}
                  >
                    {"KONTAKT"}
                  </div>
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gHnb
                  )}
                >
                  {"Školska 73, Aleksandrovac 37230, Serbia "}
                </div>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__f9Lq
                  )}
                  href={"mailto:'gajiceva@gmai.com"}
                >
                  {"gajicevarakija@gmail.com"}
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "hero",
    "navigationBar",
    "logoFillIn",
    "gajicevaRakija",
    "bottomText",
    "socialsConvertToLinks",
    "scroll",
    "freeBox",
    "featuredProducts",
    "productsColumnsParent",
    "one6",
    "one",
    "one2",
    "one3",
    "one4",
    "one5",
    "one7",
    "whereCanYouTasteProdcuts2",
    "discover",
    "discoverColumns",
    "mapNeedToFindBetterMap",
    "map2NeedBetterMap",
    "contact",
    "contactParent",
    "contact2",
    "form",
    "textInput",
    "textInput2",
    "textInput3",
    "mapAndInfo",
    "footer",
    "footerParentColumns",
    "logo"
  ],

  hero: [
    "hero",
    "navigationBar",
    "logoFillIn",
    "gajicevaRakija",
    "bottomText",
    "socialsConvertToLinks",
    "scroll",
    "freeBox"
  ],

  navigationBar: ["navigationBar", "logoFillIn"],
  logoFillIn: ["logoFillIn"],
  gajicevaRakija: [
    "gajicevaRakija",
    "bottomText",
    "socialsConvertToLinks",
    "scroll"
  ],

  bottomText: ["bottomText", "socialsConvertToLinks", "scroll"],
  socialsConvertToLinks: ["socialsConvertToLinks"],
  scroll: ["scroll"],
  freeBox: ["freeBox"],
  featuredProducts: [
    "featuredProducts",
    "productsColumnsParent",
    "one6",
    "one",
    "one2",
    "one3",
    "one4",
    "one5",
    "one7"
  ],

  productsColumnsParent: [
    "productsColumnsParent",
    "one6",
    "one",
    "one2",
    "one3",
    "one4",
    "one5",
    "one7"
  ],

  one6: ["one6"],
  one: ["one"],
  one2: ["one2"],
  one3: ["one3"],
  one4: ["one4"],
  one5: ["one5"],
  one7: ["one7"],
  whereCanYouTasteProdcuts2: ["whereCanYouTasteProdcuts2"],
  discover: [
    "discover",
    "discoverColumns",
    "mapNeedToFindBetterMap",
    "map2NeedBetterMap"
  ],

  discoverColumns: [
    "discoverColumns",
    "mapNeedToFindBetterMap",
    "map2NeedBetterMap"
  ],

  mapNeedToFindBetterMap: ["mapNeedToFindBetterMap", "map2NeedBetterMap"],
  map2NeedBetterMap: ["map2NeedBetterMap"],
  contact: [
    "contact",
    "contactParent",
    "contact2",
    "form",
    "textInput",
    "textInput2",
    "textInput3",
    "mapAndInfo"
  ],

  contactParent: [
    "contactParent",
    "contact2",
    "form",
    "textInput",
    "textInput2",
    "textInput3",
    "mapAndInfo"
  ],

  contact2: ["contact2", "form", "textInput", "textInput2", "textInput3"],
  form: ["form", "textInput", "textInput2", "textInput3"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  mapAndInfo: ["mapAndInfo"],
  footer: ["footer", "footerParentColumns", "logo"],
  footerParentColumns: ["footerParentColumns", "logo"],
  logo: ["logo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    navigationBar: makeNodeComponent("navigationBar"),
    logoFillIn: makeNodeComponent("logoFillIn"),
    gajicevaRakija: makeNodeComponent("gajicevaRakija"),
    bottomText: makeNodeComponent("bottomText"),
    socialsConvertToLinks: makeNodeComponent("socialsConvertToLinks"),
    scroll: makeNodeComponent("scroll"),
    freeBox: makeNodeComponent("freeBox"),
    featuredProducts: makeNodeComponent("featuredProducts"),
    productsColumnsParent: makeNodeComponent("productsColumnsParent"),
    one6: makeNodeComponent("one6"),
    one: makeNodeComponent("one"),
    one2: makeNodeComponent("one2"),
    one3: makeNodeComponent("one3"),
    one4: makeNodeComponent("one4"),
    one5: makeNodeComponent("one5"),
    one7: makeNodeComponent("one7"),
    whereCanYouTasteProdcuts2: makeNodeComponent("whereCanYouTasteProdcuts2"),
    discover: makeNodeComponent("discover"),
    discoverColumns: makeNodeComponent("discoverColumns"),
    mapNeedToFindBetterMap: makeNodeComponent("mapNeedToFindBetterMap"),
    map2NeedBetterMap: makeNodeComponent("map2NeedBetterMap"),
    contact: makeNodeComponent("contact"),
    contactParent: makeNodeComponent("contactParent"),
    contact2: makeNodeComponent("contact2"),
    form: makeNodeComponent("form"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    mapAndInfo: makeNodeComponent("mapAndInfo"),
    footer: makeNodeComponent("footer"),
    footerParentColumns: makeNodeComponent("footerParentColumns"),
    logo: makeNodeComponent("logo"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
